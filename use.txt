try {

            const { email, otp, hash } = req.body;

            const response = await OtpUtil.validateOTP(email, otp, hash);
           
            const check = await LoginModel.findOne({ email })
            if (check) return res.status(400).json({ msg: "This email already exists." })


           
            
            res.json({ msg: "Account has been activated!" })

        } catch (err) {
            console.log(err)
            return res.status(500).json({ msg: err.message })
        }



        
    // ---------------------------------------------------------------------------------------------------------------------
    // Account activate using Otp
    async activateEmail(req, res) {
        try {
            const { email, otp, hash } = req.body;

            const [hashValue, expires] = hash.split(".seperator.");
            const now = Date.now();
            
            if (now > +expires) {
               res.json({
                    verification: false,
                    msg: `OTP Expired!`,
                })
            }
            
            const data = `${email}${otp}${expires}`;
           
            //Compare value is true are false 
            const isValid  = await bcrypt.compare(data, hashValue);
          
            if(!isValid) {
             res.json({ 
                 msg:"OTP is invalid.",
                 status:false, 
                })
            }else{
                 res.json({
                      msg:"OTP is valid.",
                      status:true,
                    })
                
                const user = await LoginModel.updateOne({ isVerifyed: true })
               

            }

        } catch (error) {
            console.error(error);
        }

    }

    // ----------------------------------------------------------------------------------------------------------------------

    Signin

     const user = await LoginModel.findOne({email:email, isVerifyedtrue: true} )
            
            
            if (!user) return res.status(400).json({ msg: "This email in not verifed." })

           

            const isMatch = await bcrypt.compare(password, user.password)
            if (!isMatch) return res.status(400).json({ msg: "Password is incorrect." })
            

            res.json({ msg: "Login success!" })







try{
        const { email, password } = req.body
        // check if user exist
        const user = await LoginModel.findOne({ email: email })
        if (!user) return res.status(400).json({ msg: "This email in not verifed." })


        LoginModel.find({ email })
            .then((data) => {
                if (data.length) {
                    if (!data[0].isVerifyed) {
                        res.json({
                            msg: "Email hasn't been verified"
                        })
                    } else {
                        const isMatch = await bcrypt.compare(password, user.password)
                        if (!isMatch) return res.status(400).json({ msg: "Password is incorrect." })
                        res.json({ msg: "Login success!" })
                    }
                } catch (err) {
                    res.json({ msg: err.message })
                }




// student signin information
    async signin(req, res) {

        const { email, password } = req.body;

        if (email == "" || password == "") {
            res.json({
                status: "FAILED",
                msg: "Empty credentials supplied",
            });
        } else {
            // check if user exist
            const User = await LoginModel.find({ email })
                .then((data) => {
                  
                        // check if user eis verified or not
                        if (!data[0].isVerifyed) {
                            res.json({
                                status: "FAILED",
                                msg: "Email hasen't been verified",
                            });

                        } else {
                            const hashedpassword = data[0].password;

                            bcrypt.compare(password, hashedpassword)
                                .then((result) => {

                                    if (result) {
                                        // passeord match
                                        res.json({
                                            status: "SUCCESS",
                                            msg: "Signin successful",
                                            data: data,
                                        });

                                    } else {
                                        res.json({
                                            status: "FAILED",
                                            msg: "Invalid password enterd!",
                                        });
                                    }
                                })

                                .catch((err) => {
                                    res.json({
                                        status: "FAILED",
                                        msg: "An error occurred while comparing passeord",
                                    });
                                })
                                
                            }
                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/ const now = Date.now();
        // if (now > +expires) {
        //     res.json({
        //         verification: false,
        //         msg: `OTP Expired!`,
        //     })
        // }

        // find email is exist in db or not
        const isValid = await LoginModel.find({ email: email, otp: otp })
        if (!isValid) {
            res.status(400).json({
                msg: "OTP is invalid.",
                status: false,
            })
        } else {
            const verifyAccount = LoginModel.findOneAndUpdate({ email: email }, { $set: { isVerifyed: true } })
                .then(() => {

                    console.log("successfully verifed");
                }).catch((err) => {
                    console.log(err);
                })
              
            res.json({
                msg: "OTP is valid.",
                status: "true hai",
            })
        }







-----------------------------------------------------------------------------------------------



        // if (!isValid) {
        //     res.status(400).json({
        //         msg: "OTP is invalid.",
        //         status: false,
        //     });
        // } else {
        //     const verifyAccount = LoginModel.findOneAndUpdate(
        //         { email: req.body.email },
        //         { $set: { isVerifyed: true } }
        //     )
        //         .then(() => {
        //             console.log("successfully verifed");
        //         })
        //         .catch((err) => {
        //             console.log(err);
        //         });
        //     res.json({
        //         msg: "OTP is valid.",
        //         status: true,
        //     });
        // }

        // const now = Date.now();
        // if (now > +expires) {
        //     res.json({
        //         verification: false,
        //         msg: `OTP Expired!`,
        //     })
        // }



==============================  aws =====================================================
// const aws = require("aws-sdk");
// const multer = require("multer");
// const {
//   port,
//   BUCKET,
//   secretAccessKey,
//   accessKeyId,
//   region,
// } = require("./config");



// Multer and Bucket
// const multerS3 = require("multer-s3");
// aws.config.update({
//   secretAccessKey: process.env.ACCESS_SECRET,
//   accessKeyId: process.env.ACCESS_KEY,
//   region: process.env.REGION,
// });
// const s3 = new aws.S3();

// const upload = multer({
//   storage: multerS3({
//     s3: s3,
//     bucket: BUCKET,
//     key: function (req, file, cb) {
//       console.log(file);
//       cb(null, file.originalname);
//     },
//   }),
// });

// //img post in database and bucket
// app.post("/upload", upload.array("file"), async function (req, res, next) {
//   res.send("Successfully uploaded " + req.file);
//   await User.create({ photoUrl: req.file });
// });
// //get all files
// app.get("/list", async (req, res) => {
//   let r = await s3.listObjectsV2({ Bucket: BUCKET }).promise();
//   var x = r.Contents.map((item) => item.Key);
//   res.send(x);
//   User.create({ photoUrl: req.file });
//   console.log(x);
// });





